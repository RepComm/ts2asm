export class Accessor {
  constructor(size = 0) {
    this.internal = new Array(size);
    this.offset = 0;
    this.stack = new Array();
  }

  save() {
    this.stack.push(this.offset);
    return this;
  }

  getLastSave() {
    return this.stack[this.stack.length - 1];
  }

  slice(from, to) {
    return this.internal.slice(from, to);
  }

  restore(popOnly = false) {
    let v = this.stack.pop();
    if (!popOnly) this.setOffset(v);
    return this;
  }

  setOffset(offset) {
    this.offset = offset;
    return this;
  }

  getOffset() {
    return this.offset;
  }

  rewind(count = 1) {
    this.offset -= count;
    if (this.offset < 0) this.offset = 0;
    return this;
  }
  /**Sets the items from a passed array*/


  setItems(items) {
    //copy array
    this.internal = items.slice();
    return this;
  }
  /**Grab the next item and then advance the offset*/


  next() {
    let result = this.peak();
    this.offset++;
    return result;
  }
  /**Returns true if there are more items to process at the current offset*/


  hasNext() {
    return this.offset < this.internal.length;
  }
  /**Grab the next item without advancing*/


  peak() {
    return this.internal[this.offset];
  }

}
/**An accessor (list with auto increment) for iterating over
 * an array of items with a offset stack that allows
 * save() and restore() to offets
 */

export class Staccessor extends Accessor {
  constructor(size = 0) {
    super(size);
  }
  /**Push the current index onto a stack to be recovered by `restore()` later*/


  save() {
    this.stack.push(this.offset);
    return this;
  }
  /**Jump back to a `save()`ed token offset*/


  restore() {
    this.setOffset(this.stack.pop());
    return this;
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hY2Nlc3Nvci50cyJdLCJuYW1lcyI6WyJBY2Nlc3NvciIsImNvbnN0cnVjdG9yIiwic2l6ZSIsImludGVybmFsIiwiQXJyYXkiLCJvZmZzZXQiLCJzdGFjayIsInNhdmUiLCJwdXNoIiwiZ2V0TGFzdFNhdmUiLCJsZW5ndGgiLCJzbGljZSIsImZyb20iLCJ0byIsInJlc3RvcmUiLCJwb3BPbmx5IiwidiIsInBvcCIsInNldE9mZnNldCIsImdldE9mZnNldCIsInJld2luZCIsImNvdW50Iiwic2V0SXRlbXMiLCJpdGVtcyIsIm5leHQiLCJyZXN1bHQiLCJwZWFrIiwiaGFzTmV4dCIsIlN0YWNjZXNzb3IiXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sTUFBTUEsUUFBTixDQUFrQjtBQUt2QkMsRUFBQUEsV0FBVyxDQUFDQyxJQUFZLEdBQUcsQ0FBaEIsRUFBbUI7QUFDNUIsU0FBS0MsUUFBTCxHQUFnQixJQUFJQyxLQUFKLENBQVVGLElBQVYsQ0FBaEI7QUFDQSxTQUFLRyxNQUFMLEdBQWMsQ0FBZDtBQUNBLFNBQUtDLEtBQUwsR0FBYSxJQUFJRixLQUFKLEVBQWI7QUFDRDs7QUFDREcsRUFBQUEsSUFBSSxHQUFVO0FBQ1osU0FBS0QsS0FBTCxDQUFXRSxJQUFYLENBQWdCLEtBQUtILE1BQXJCO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0RJLEVBQUFBLFdBQVcsR0FBWTtBQUNyQixXQUFPLEtBQUtILEtBQUwsQ0FBVyxLQUFLQSxLQUFMLENBQVdJLE1BQVgsR0FBa0IsQ0FBN0IsQ0FBUDtBQUNEOztBQUNEQyxFQUFBQSxLQUFLLENBQUVDLElBQUYsRUFBZ0JDLEVBQWhCLEVBQXNDO0FBQ3pDLFdBQU8sS0FBS1YsUUFBTCxDQUFjUSxLQUFkLENBQW9CQyxJQUFwQixFQUEwQkMsRUFBMUIsQ0FBUDtBQUNEOztBQUNEQyxFQUFBQSxPQUFPLENBQUVDLE9BQWdCLEdBQUcsS0FBckIsRUFBa0M7QUFDdkMsUUFBSUMsQ0FBQyxHQUFHLEtBQUtWLEtBQUwsQ0FBV1csR0FBWCxFQUFSO0FBQ0EsUUFBSSxDQUFDRixPQUFMLEVBQWMsS0FBS0csU0FBTCxDQUFlRixDQUFmO0FBQ2QsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0RFLEVBQUFBLFNBQVMsQ0FBQ2IsTUFBRCxFQUF1QjtBQUM5QixTQUFLQSxNQUFMLEdBQWNBLE1BQWQ7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFDRGMsRUFBQUEsU0FBUyxHQUFZO0FBQ25CLFdBQU8sS0FBS2QsTUFBWjtBQUNEOztBQUNEZSxFQUFBQSxNQUFNLENBQUNDLEtBQWEsR0FBRyxDQUFqQixFQUEwQjtBQUM5QixTQUFLaEIsTUFBTCxJQUFlZ0IsS0FBZjtBQUNBLFFBQUksS0FBS2hCLE1BQUwsR0FBYyxDQUFsQixFQUFxQixLQUFLQSxNQUFMLEdBQWMsQ0FBZDtBQUNyQixXQUFPLElBQVA7QUFDRDtBQUNEOzs7QUFDQWlCLEVBQUFBLFFBQVEsQ0FBQ0MsS0FBRCxFQUF3QjtBQUM5QjtBQUNBLFNBQUtwQixRQUFMLEdBQWdCb0IsS0FBSyxDQUFDWixLQUFOLEVBQWhCO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7QUFDRDs7O0FBQ0FhLEVBQUFBLElBQUksR0FBTTtBQUNSLFFBQUlDLE1BQU0sR0FBRyxLQUFLQyxJQUFMLEVBQWI7QUFDQSxTQUFLckIsTUFBTDtBQUNBLFdBQU9vQixNQUFQO0FBQ0Q7QUFDRDs7O0FBQ0FFLEVBQUFBLE9BQU8sR0FBWTtBQUNqQixXQUFPLEtBQUt0QixNQUFMLEdBQWMsS0FBS0YsUUFBTCxDQUFjTyxNQUFuQztBQUNEO0FBQ0Q7OztBQUNBZ0IsRUFBQUEsSUFBSSxHQUFNO0FBQ1IsV0FBTyxLQUFLdkIsUUFBTCxDQUFjLEtBQUtFLE1BQW5CLENBQVA7QUFDRDs7QUF4RHNCO0FBMkR6QjtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxPQUFPLE1BQU11QixVQUFOLFNBQTRCNUIsUUFBNUIsQ0FBd0M7QUFFN0NDLEVBQUFBLFdBQVcsQ0FBQ0MsSUFBWSxHQUFHLENBQWhCLEVBQW1CO0FBQzVCLFVBQU1BLElBQU47QUFDRDtBQUNEOzs7QUFDQUssRUFBQUEsSUFBSSxHQUFTO0FBQ1gsU0FBS0QsS0FBTCxDQUFXRSxJQUFYLENBQWdCLEtBQUtILE1BQXJCO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7QUFDRDs7O0FBQ0FTLEVBQUFBLE9BQU8sR0FBUztBQUNkLFNBQUtJLFNBQUwsQ0FBZSxLQUFLWixLQUFMLENBQVdXLEdBQVgsRUFBZjtBQUNBLFdBQU8sSUFBUDtBQUNEOztBQWQ0QyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGNsYXNzIEFjY2Vzc29yPFQ+IHtcbiAgcHJvdGVjdGVkIGludGVybmFsOiBBcnJheTxUPjtcbiAgcHJvdGVjdGVkIG9mZnNldDogbnVtYmVyO1xuICBwcml2YXRlIHN0YWNrOiBBcnJheTxudW1iZXI+O1xuXG4gIGNvbnN0cnVjdG9yKHNpemU6IG51bWJlciA9IDApIHtcbiAgICB0aGlzLmludGVybmFsID0gbmV3IEFycmF5KHNpemUpO1xuICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICB0aGlzLnN0YWNrID0gbmV3IEFycmF5KCk7XG4gIH1cbiAgc2F2ZSAoKTogdGhpcyB7XG4gICAgdGhpcy5zdGFjay5wdXNoKHRoaXMub2Zmc2V0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBnZXRMYXN0U2F2ZSAoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aC0xXTtcbiAgfVxuICBzbGljZSAoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKTogQXJyYXk8VD4ge1xuICAgIHJldHVybiB0aGlzLmludGVybmFsLnNsaWNlKGZyb20sIHRvKTtcbiAgfVxuICByZXN0b3JlIChwb3BPbmx5OiBib29sZWFuID0gZmFsc2UpOiB0aGlzIHtcbiAgICBsZXQgdiA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgaWYgKCFwb3BPbmx5KSB0aGlzLnNldE9mZnNldCh2KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzZXRPZmZzZXQob2Zmc2V0OiBudW1iZXIpOiB0aGlzIHtcbiAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBnZXRPZmZzZXQgKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMub2Zmc2V0O1xuICB9XG4gIHJld2luZChjb3VudDogbnVtYmVyID0gMSk6IHRoaXMge1xuICAgIHRoaXMub2Zmc2V0IC09IGNvdW50O1xuICAgIGlmICh0aGlzLm9mZnNldCA8IDApIHRoaXMub2Zmc2V0ID0gMDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipTZXRzIHRoZSBpdGVtcyBmcm9tIGEgcGFzc2VkIGFycmF5Ki9cbiAgc2V0SXRlbXMoaXRlbXM6IEFycmF5PFQ+KTogdGhpcyB7XG4gICAgLy9jb3B5IGFycmF5XG4gICAgdGhpcy5pbnRlcm5hbCA9IGl0ZW1zLnNsaWNlKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqR3JhYiB0aGUgbmV4dCBpdGVtIGFuZCB0aGVuIGFkdmFuY2UgdGhlIG9mZnNldCovXG4gIG5leHQoKTogVCB7XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMucGVhaygpO1xuICAgIHRoaXMub2Zmc2V0Kys7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICAvKipSZXR1cm5zIHRydWUgaWYgdGhlcmUgYXJlIG1vcmUgaXRlbXMgdG8gcHJvY2VzcyBhdCB0aGUgY3VycmVudCBvZmZzZXQqL1xuICBoYXNOZXh0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm9mZnNldCA8IHRoaXMuaW50ZXJuYWwubGVuZ3RoO1xuICB9XG4gIC8qKkdyYWIgdGhlIG5leHQgaXRlbSB3aXRob3V0IGFkdmFuY2luZyovXG4gIHBlYWsoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJuYWxbdGhpcy5vZmZzZXRdO1xuICB9XG59XG5cbi8qKkFuIGFjY2Vzc29yIChsaXN0IHdpdGggYXV0byBpbmNyZW1lbnQpIGZvciBpdGVyYXRpbmcgb3ZlclxuICogYW4gYXJyYXkgb2YgaXRlbXMgd2l0aCBhIG9mZnNldCBzdGFjayB0aGF0IGFsbG93c1xuICogc2F2ZSgpIGFuZCByZXN0b3JlKCkgdG8gb2ZmZXRzXG4gKi9cbmV4cG9ydCBjbGFzcyBTdGFjY2Vzc29yPFQ+IGV4dGVuZHMgQWNjZXNzb3I8VD4ge1xuICBwcml2YXRlIHN0YWNrOiBBcnJheTxudW1iZXI+O1xuICBjb25zdHJ1Y3RvcihzaXplOiBudW1iZXIgPSAwKSB7XG4gICAgc3VwZXIoc2l6ZSk7XG4gIH1cbiAgLyoqUHVzaCB0aGUgY3VycmVudCBpbmRleCBvbnRvIGEgc3RhY2sgdG8gYmUgcmVjb3ZlcmVkIGJ5IGByZXN0b3JlKClgIGxhdGVyKi9cbiAgc2F2ZSgpOiB0aGlzIHtcbiAgICB0aGlzLnN0YWNrLnB1c2godGhpcy5vZmZzZXQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKkp1bXAgYmFjayB0byBhIGBzYXZlKClgZWQgdG9rZW4gb2Zmc2V0Ki9cbiAgcmVzdG9yZSgpOiB0aGlzIHtcbiAgICB0aGlzLnNldE9mZnNldCh0aGlzLnN0YWNrLnBvcCgpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIl19