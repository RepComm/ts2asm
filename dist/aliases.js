import * as fs from "fs";
let txtDec = new TextDecoder();
export const readFile = fpath => {
  return new Promise((resolve, reject) => {
    fs.readFile(fpath, {}, (err, buffer) => {
      if (err) {
        reject(err);
        return;
      }

      resolve(buffer);
    });
  });
};
export const readTextFile = fpath => {
  return new Promise((resolve, reject) => {
    readFile(fpath).catch(reject).then(buf => {
      if (!buf) {
        reject("Buffer was null or undefined");
        return;
      }

      resolve(txtDec.decode(buf));
    });
  });
};
export const ensureDir = (dpath, create = true) => {
  return new Promise((resolve, reject) => {
    fs.access(dpath, err => {
      if (err) {
        if (create) {
          //It didn't exist, try to create
          fs.mkdir(dpath, err => {
            if (err) {
              //Could create it
              reject();
              throw `Path ${dpath} does not exist, and failed to create, see node fs error: ${err}`;
            } else {
              //It got created
              resolve();
            }
          });
        } else {
          //It didn't exist, and we aren't allowed to create it
          throw `Path ${dpath} doesn't exist, and 'create' argument is false, see error: ${err}`;
        }
      } else {
        //It exists, move on
        resolve();
      }
    });
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hbGlhc2VzLnRzIl0sIm5hbWVzIjpbImZzIiwidHh0RGVjIiwiVGV4dERlY29kZXIiLCJyZWFkRmlsZSIsImZwYXRoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJidWZmZXIiLCJyZWFkVGV4dEZpbGUiLCJjYXRjaCIsInRoZW4iLCJidWYiLCJkZWNvZGUiLCJlbnN1cmVEaXIiLCJkcGF0aCIsImNyZWF0ZSIsImFjY2VzcyIsIm1rZGlyIl0sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEtBQUtBLEVBQVosTUFBb0IsSUFBcEI7QUFFQSxJQUFJQyxNQUFNLEdBQUcsSUFBSUMsV0FBSixFQUFiO0FBRUEsT0FBTyxNQUFNQyxRQUFRLEdBQUlDLEtBQUQsSUFBd0M7QUFDOUQsU0FBTyxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDUCxJQUFBQSxFQUFFLENBQUNHLFFBQUgsQ0FBWUMsS0FBWixFQUFtQixFQUFuQixFQUF1QixDQUFDSSxHQUFELEVBQU1DLE1BQU4sS0FBaUI7QUFDdEMsVUFBSUQsR0FBSixFQUFTO0FBQ1BELFFBQUFBLE1BQU0sQ0FBQ0MsR0FBRCxDQUFOO0FBQ0E7QUFDRDs7QUFDREYsTUFBQUEsT0FBTyxDQUFDRyxNQUFELENBQVA7QUFDRCxLQU5EO0FBT0QsR0FSTSxDQUFQO0FBU0QsQ0FWTTtBQVlQLE9BQU8sTUFBTUMsWUFBWSxHQUFJTixLQUFELElBQW9DO0FBQzlELFNBQU8sSUFBSUMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtBQUN0Q0osSUFBQUEsUUFBUSxDQUFDQyxLQUFELENBQVIsQ0FBZ0JPLEtBQWhCLENBQXNCSixNQUF0QixFQUE4QkssSUFBOUIsQ0FBb0NDLEdBQUQsSUFBUztBQUMxQyxVQUFJLENBQUNBLEdBQUwsRUFBVTtBQUNSTixRQUFBQSxNQUFNLENBQUMsOEJBQUQsQ0FBTjtBQUNBO0FBQ0Q7O0FBQ0RELE1BQUFBLE9BQU8sQ0FBQ0wsTUFBTSxDQUFDYSxNQUFQLENBQWNELEdBQWQsQ0FBRCxDQUFQO0FBQ0QsS0FORDtBQU9ELEdBUk0sQ0FBUDtBQVNELENBVk07QUFZUCxPQUFPLE1BQU1FLFNBQVMsR0FBRyxDQUFDQyxLQUFELEVBQWdCQyxNQUFlLEdBQUcsSUFBbEMsS0FBMEQ7QUFDakYsU0FBTyxJQUFJWixPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDUCxJQUFBQSxFQUFFLENBQUNrQixNQUFILENBQVVGLEtBQVYsRUFBa0JSLEdBQUQsSUFBUztBQUN4QixVQUFJQSxHQUFKLEVBQVM7QUFDUCxZQUFJUyxNQUFKLEVBQVk7QUFDVjtBQUNBakIsVUFBQUEsRUFBRSxDQUFDbUIsS0FBSCxDQUFTSCxLQUFULEVBQWlCUixHQUFELElBQVM7QUFDdkIsZ0JBQUlBLEdBQUosRUFBUztBQUNQO0FBQ0FELGNBQUFBLE1BQU07QUFDTixvQkFBTyxRQUFPUyxLQUFNLDZEQUE0RFIsR0FBSSxFQUFwRjtBQUNELGFBSkQsTUFJTztBQUNMO0FBQ0FGLGNBQUFBLE9BQU87QUFDUjtBQUNGLFdBVEQ7QUFVRCxTQVpELE1BWU87QUFDTDtBQUNBLGdCQUFPLFFBQU9VLEtBQU0sOERBQTZEUixHQUFJLEVBQXJGO0FBQ0Q7QUFDRixPQWpCRCxNQWlCTztBQUNMO0FBQ0FGLFFBQUFBLE9BQU87QUFDUjtBQUNGLEtBdEJEO0FBdUJELEdBeEJNLENBQVA7QUF5QkQsQ0ExQk0iLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCAqIGFzIGZzIGZyb20gXCJmc1wiO1xuXG5sZXQgdHh0RGVjID0gbmV3IFRleHREZWNvZGVyKCk7XG5cbmV4cG9ydCBjb25zdCByZWFkRmlsZSA9IChmcGF0aDogc3RyaW5nKTogUHJvbWlzZTxVaW50OEFycmF5PiA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZnMucmVhZEZpbGUoZnBhdGgsIHt9LCAoZXJyLCBidWZmZXIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJlc29sdmUoYnVmZmVyKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCByZWFkVGV4dEZpbGUgPSAoZnBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgcmVhZEZpbGUoZnBhdGgpLmNhdGNoKHJlamVjdCkudGhlbigoYnVmKSA9PiB7XG4gICAgICBpZiAoIWJ1Zikge1xuICAgICAgICByZWplY3QoXCJCdWZmZXIgd2FzIG51bGwgb3IgdW5kZWZpbmVkXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXNvbHZlKHR4dERlYy5kZWNvZGUoYnVmKSk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgY29uc3QgZW5zdXJlRGlyID0gKGRwYXRoOiBzdHJpbmcsIGNyZWF0ZTogYm9vbGVhbiA9IHRydWUpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmcy5hY2Nlc3MoZHBhdGgsIChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgaWYgKGNyZWF0ZSkge1xuICAgICAgICAgIC8vSXQgZGlkbid0IGV4aXN0LCB0cnkgdG8gY3JlYXRlXG4gICAgICAgICAgZnMubWtkaXIoZHBhdGgsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgLy9Db3VsZCBjcmVhdGUgaXRcbiAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgIHRocm93IGBQYXRoICR7ZHBhdGh9IGRvZXMgbm90IGV4aXN0LCBhbmQgZmFpbGVkIHRvIGNyZWF0ZSwgc2VlIG5vZGUgZnMgZXJyb3I6ICR7ZXJyfWA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvL0l0IGdvdCBjcmVhdGVkXG4gICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvL0l0IGRpZG4ndCBleGlzdCwgYW5kIHdlIGFyZW4ndCBhbGxvd2VkIHRvIGNyZWF0ZSBpdFxuICAgICAgICAgIHRocm93IGBQYXRoICR7ZHBhdGh9IGRvZXNuJ3QgZXhpc3QsIGFuZCAnY3JlYXRlJyBhcmd1bWVudCBpcyBmYWxzZSwgc2VlIGVycm9yOiAke2Vycn1gO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL0l0IGV4aXN0cywgbW92ZSBvblxuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuIl19