import { TokenAccessor } from "../tokenizer/token.js";
import { StatementTemplate } from "./statement.js";
export default class Parser {
  constructor() {
    this.stemps = new Array();
  }

  hasStatementTemplate(statement) {
    return this.stemps.includes(statement);
  }

  addStatementTemplate(statement) {
    this.stemps.push(statement);
    return this;
  }

  removeStatementTemplate(statement) {
    let ind = this.stemps.indexOf(statement);

    if (ind != -1) {
      this.stemps.splice(ind, 1);
    }

    return this;
  }

  createStatementTemplate() {
    let result = new StatementTemplate();
    this.addStatementTemplate(result);
    return result;
  }

  parse(tokens) {
    if (!this.stemps || this.stemps.length < 1) throw `No statement templates, cannot parse tokens!`;
    let accessor = new TokenAccessor().setTokens(tokens);
    let result = {
      statements: new Array()
    };
    let statement;
    let success = false;
    let lastToken;

    while (accessor.hasNext()) {
      for (let template of this.stemps) {
        lastToken = accessor.peakNext();
        statement = template.parse(accessor);

        if (statement.getType() != "error") {
          result.statements.push(statement);
          success = true;
          break;
        }
      }

      if (!success) {
        console.warn("dumped the following tree:", result);
        throw `Failed to parse tokens instead statement starting with ${lastToken}`;
      }
    }

    return result;
  }

} //statement
//--expression
//----const
//----var
//----func
//----operator
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXIvcGFyc2VyLnRzIl0sIm5hbWVzIjpbIlRva2VuQWNjZXNzb3IiLCJTdGF0ZW1lbnRUZW1wbGF0ZSIsIlBhcnNlciIsImNvbnN0cnVjdG9yIiwic3RlbXBzIiwiQXJyYXkiLCJoYXNTdGF0ZW1lbnRUZW1wbGF0ZSIsInN0YXRlbWVudCIsImluY2x1ZGVzIiwiYWRkU3RhdGVtZW50VGVtcGxhdGUiLCJwdXNoIiwicmVtb3ZlU3RhdGVtZW50VGVtcGxhdGUiLCJpbmQiLCJpbmRleE9mIiwic3BsaWNlIiwiY3JlYXRlU3RhdGVtZW50VGVtcGxhdGUiLCJyZXN1bHQiLCJwYXJzZSIsInRva2VucyIsImxlbmd0aCIsImFjY2Vzc29yIiwic2V0VG9rZW5zIiwic3RhdGVtZW50cyIsInN1Y2Nlc3MiLCJsYXN0VG9rZW4iLCJoYXNOZXh0IiwidGVtcGxhdGUiLCJwZWFrTmV4dCIsImdldFR5cGUiLCJjb25zb2xlIiwid2FybiJdLCJtYXBwaW5ncyI6IkFBRUEsU0FBZ0JBLGFBQWhCLFFBQXFDLHVCQUFyQztBQUVBLFNBQVNDLGlCQUFULFFBQTZDLGdCQUE3QztBQUVBLGVBQWUsTUFBTUMsTUFBTixDQUFhO0FBRTFCQyxFQUFBQSxXQUFXLEdBQUc7QUFDWixTQUFLQyxNQUFMLEdBQWMsSUFBSUMsS0FBSixFQUFkO0FBQ0Q7O0FBQ0RDLEVBQUFBLG9CQUFvQixDQUFDQyxTQUFELEVBQXdDO0FBQzFELFdBQVEsS0FBS0gsTUFBTCxDQUFZSSxRQUFaLENBQXFCRCxTQUFyQixDQUFSO0FBQ0Q7O0FBQ0RFLEVBQUFBLG9CQUFvQixDQUFDRixTQUFELEVBQXFDO0FBQ3ZELFNBQUtILE1BQUwsQ0FBWU0sSUFBWixDQUFpQkgsU0FBakI7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFDREksRUFBQUEsdUJBQXVCLENBQUNKLFNBQUQsRUFBcUM7QUFDMUQsUUFBSUssR0FBRyxHQUFHLEtBQUtSLE1BQUwsQ0FBWVMsT0FBWixDQUFvQk4sU0FBcEIsQ0FBVjs7QUFDQSxRQUFJSyxHQUFHLElBQUksQ0FBQyxDQUFaLEVBQWU7QUFDYixXQUFLUixNQUFMLENBQVlVLE1BQVosQ0FBbUJGLEdBQW5CLEVBQXdCLENBQXhCO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0RHLEVBQUFBLHVCQUF1QixHQUF1QjtBQUM1QyxRQUFJQyxNQUFNLEdBQUcsSUFBSWYsaUJBQUosRUFBYjtBQUNBLFNBQUtRLG9CQUFMLENBQTBCTyxNQUExQjtBQUNBLFdBQU9BLE1BQVA7QUFDRDs7QUFDREMsRUFBQUEsS0FBSyxDQUFDQyxNQUFELEVBQXdCO0FBQzNCLFFBQUksQ0FBQyxLQUFLZCxNQUFOLElBQWdCLEtBQUtBLE1BQUwsQ0FBWWUsTUFBWixHQUFxQixDQUF6QyxFQUE0QyxNQUFPLDhDQUFQO0FBQzVDLFFBQUlDLFFBQVEsR0FBRyxJQUFJcEIsYUFBSixHQUFvQnFCLFNBQXBCLENBQThCSCxNQUE5QixDQUFmO0FBQ0EsUUFBSUYsTUFBWSxHQUFHO0FBQ2pCTSxNQUFBQSxVQUFVLEVBQUUsSUFBSWpCLEtBQUo7QUFESyxLQUFuQjtBQUdBLFFBQUlFLFNBQUo7QUFDQSxRQUFJZ0IsT0FBZ0IsR0FBRyxLQUF2QjtBQUNBLFFBQUlDLFNBQUo7O0FBRUEsV0FBT0osUUFBUSxDQUFDSyxPQUFULEVBQVAsRUFBMkI7QUFDekIsV0FBSyxJQUFJQyxRQUFULElBQXFCLEtBQUt0QixNQUExQixFQUFrQztBQUNoQ29CLFFBQUFBLFNBQVMsR0FBR0osUUFBUSxDQUFDTyxRQUFULEVBQVo7QUFFQXBCLFFBQUFBLFNBQVMsR0FBR21CLFFBQVEsQ0FBQ1QsS0FBVCxDQUFlRyxRQUFmLENBQVo7O0FBQ0EsWUFBSWIsU0FBUyxDQUFDcUIsT0FBVixNQUF1QixPQUEzQixFQUFvQztBQUNsQ1osVUFBQUEsTUFBTSxDQUFDTSxVQUFQLENBQW1CWixJQUFuQixDQUF3QkgsU0FBeEI7QUFDQWdCLFVBQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0E7QUFDRDtBQUNGOztBQUNELFVBQUksQ0FBQ0EsT0FBTCxFQUFjO0FBQ1pNLFFBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLDRCQUFiLEVBQTJDZCxNQUEzQztBQUNBLGNBQU8sMERBQXlEUSxTQUFXLEVBQTNFO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPUixNQUFQO0FBQ0Q7O0FBcER5QixDLENBdUQ1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBUcmVlIGZyb20gXCIuL3RyZWUuanNcIjtcbmltcG9ydCBUb2tlbiwgeyBUb2tlbkFjY2Vzc29yIH0gZnJvbSBcIi4uL3Rva2VuaXplci90b2tlbi5qc1wiO1xuXG5pbXBvcnQgeyBTdGF0ZW1lbnRUZW1wbGF0ZSwgU3RhdGVtZW50IH0gZnJvbSBcIi4vc3RhdGVtZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhcnNlciB7XG4gIHN0ZW1wczogQXJyYXk8U3RhdGVtZW50VGVtcGxhdGU+O1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0ZW1wcyA9IG5ldyBBcnJheSgpO1xuICB9XG4gIGhhc1N0YXRlbWVudFRlbXBsYXRlKHN0YXRlbWVudDogU3RhdGVtZW50VGVtcGxhdGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKHRoaXMuc3RlbXBzLmluY2x1ZGVzKHN0YXRlbWVudCkpO1xuICB9XG4gIGFkZFN0YXRlbWVudFRlbXBsYXRlKHN0YXRlbWVudDogU3RhdGVtZW50VGVtcGxhdGUpOiB0aGlzIHtcbiAgICB0aGlzLnN0ZW1wcy5wdXNoKHN0YXRlbWVudCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcmVtb3ZlU3RhdGVtZW50VGVtcGxhdGUoc3RhdGVtZW50OiBTdGF0ZW1lbnRUZW1wbGF0ZSk6IHRoaXMge1xuICAgIGxldCBpbmQgPSB0aGlzLnN0ZW1wcy5pbmRleE9mKHN0YXRlbWVudCk7XG4gICAgaWYgKGluZCAhPSAtMSkge1xuICAgICAgdGhpcy5zdGVtcHMuc3BsaWNlKGluZCwgMSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGNyZWF0ZVN0YXRlbWVudFRlbXBsYXRlICgpOiBTdGF0ZW1lbnRUZW1wbGF0ZSB7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBTdGF0ZW1lbnRUZW1wbGF0ZSgpO1xuICAgIHRoaXMuYWRkU3RhdGVtZW50VGVtcGxhdGUocmVzdWx0KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIHBhcnNlKHRva2VuczogVG9rZW5bXSk6IFRyZWUge1xuICAgIGlmICghdGhpcy5zdGVtcHMgfHwgdGhpcy5zdGVtcHMubGVuZ3RoIDwgMSkgdGhyb3cgYE5vIHN0YXRlbWVudCB0ZW1wbGF0ZXMsIGNhbm5vdCBwYXJzZSB0b2tlbnMhYDtcbiAgICBsZXQgYWNjZXNzb3IgPSBuZXcgVG9rZW5BY2Nlc3NvcigpLnNldFRva2Vucyh0b2tlbnMpO1xuICAgIGxldCByZXN1bHQ6IFRyZWUgPSB7XG4gICAgICBzdGF0ZW1lbnRzOiBuZXcgQXJyYXkoKVxuICAgIH07XG4gICAgbGV0IHN0YXRlbWVudDogU3RhdGVtZW50O1xuICAgIGxldCBzdWNjZXNzOiBib29sZWFuID0gZmFsc2U7XG4gICAgbGV0IGxhc3RUb2tlbjogVG9rZW47XG5cbiAgICB3aGlsZSAoYWNjZXNzb3IuaGFzTmV4dCgpKSB7XG4gICAgICBmb3IgKGxldCB0ZW1wbGF0ZSBvZiB0aGlzLnN0ZW1wcykge1xuICAgICAgICBsYXN0VG9rZW4gPSBhY2Nlc3Nvci5wZWFrTmV4dCgpO1xuXG4gICAgICAgIHN0YXRlbWVudCA9IHRlbXBsYXRlLnBhcnNlKGFjY2Vzc29yKTtcbiAgICAgICAgaWYgKHN0YXRlbWVudC5nZXRUeXBlKCkgIT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgcmVzdWx0LnN0YXRlbWVudHMhLnB1c2goc3RhdGVtZW50KTtcbiAgICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcImR1bXBlZCB0aGUgZm9sbG93aW5nIHRyZWU6XCIsIHJlc3VsdCk7XG4gICAgICAgIHRocm93IGBGYWlsZWQgdG8gcGFyc2UgdG9rZW5zIGluc3RlYWQgc3RhdGVtZW50IHN0YXJ0aW5nIHdpdGggJHtsYXN0VG9rZW4hfWA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG4vL3N0YXRlbWVudFxuLy8tLWV4cHJlc3Npb25cbi8vLS0tLWNvbnN0XG4vLy0tLS12YXJcbi8vLS0tLWZ1bmNcbi8vLS0tLW9wZXJhdG9yXG4iXX0=