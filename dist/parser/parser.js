import { Accessor } from "../accessor.js";
export class Parser {
  constructor() {
    this.sStack = new Array();
  }

  save() {
    if (!this.sCurrent) throw `Cannot save, current statement is ${this.sCurrent}, a falsy value`;
    this.sStack.push(this.sCurrent);
    return;
  }

  restore() {
    this.sCurrent = this.sStack.pop();
    return this;
  } //FINISHED PHASE 1


  findMatchingTemplate(templateId) {
    let result = false;

    for (let template of this.language.getStatementTemplates()) {
      if (templateId && templateId !== template.getId()) continue; //Will try to meet requirements at the current token (accessor keeps track of tokens)

      this.accessor.save();

      if (this.meetTemplateRequirements(template.getRequirements())) {
        result = true;
        let matchedTokens = this.accessor.slice(this.accessor.getLastSave(), this.accessor.getOffset());
        console.log("found", template.getId(), "with", matchedTokens); //if success, we don't want to jump back, but still remove the saved value

        this.accessor.restore(true);
        break;
      }

      this.accessor.restore();
    }

    return result;
  } //FINISHED PHASE 1


  tokenMeetRequirement(token, requirement) {
    let result = true;
    if (requirement.hasTokenType() && token.type !== requirement.getTokenType()) result = false;
    if (requirement.hasTokenData() && token.data !== requirement.getTokenData()) result = false;
    return result;
  } //FINISHED PHASE 1


  meetTemplateRequirements(requirements) {
    for (let requirement of requirements) {
      if (requirement.getType() == "token") {
        if (!this.tokenMeetRequirement(this.accessor.next(), requirement)) {
          return false;
        }
      } else if (requirement.getType() == "statement") {
        //DEBUG - this is causing infiniloop
        // return false;
        //TODO - implement abstract
        return this.findMatchingTemplate(requirement.getStatementId());
      }
    }

    return true;
  }

  parse(lang, tokens) {
    this.language = lang;
    this.accessor = new Accessor().setItems(tokens);

    while (this.accessor.hasNext()) {
      if (!this.findMatchingTemplate()) {
        console.log("fail");
        break;
      }
    }
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXIvcGFyc2VyLnRzIl0sIm5hbWVzIjpbIkFjY2Vzc29yIiwiUGFyc2VyIiwiY29uc3RydWN0b3IiLCJzU3RhY2siLCJBcnJheSIsInNhdmUiLCJzQ3VycmVudCIsInB1c2giLCJyZXN0b3JlIiwicG9wIiwiZmluZE1hdGNoaW5nVGVtcGxhdGUiLCJ0ZW1wbGF0ZUlkIiwicmVzdWx0IiwidGVtcGxhdGUiLCJsYW5ndWFnZSIsImdldFN0YXRlbWVudFRlbXBsYXRlcyIsImdldElkIiwiYWNjZXNzb3IiLCJtZWV0VGVtcGxhdGVSZXF1aXJlbWVudHMiLCJnZXRSZXF1aXJlbWVudHMiLCJtYXRjaGVkVG9rZW5zIiwic2xpY2UiLCJnZXRMYXN0U2F2ZSIsImdldE9mZnNldCIsImNvbnNvbGUiLCJsb2ciLCJ0b2tlbk1lZXRSZXF1aXJlbWVudCIsInRva2VuIiwicmVxdWlyZW1lbnQiLCJoYXNUb2tlblR5cGUiLCJ0eXBlIiwiZ2V0VG9rZW5UeXBlIiwiaGFzVG9rZW5EYXRhIiwiZGF0YSIsImdldFRva2VuRGF0YSIsInJlcXVpcmVtZW50cyIsImdldFR5cGUiLCJuZXh0IiwiZ2V0U3RhdGVtZW50SWQiLCJwYXJzZSIsImxhbmciLCJ0b2tlbnMiLCJzZXRJdGVtcyIsImhhc05leHQiXSwibWFwcGluZ3MiOiJBQUdBLFNBQVNBLFFBQVQsUUFBeUIsZ0JBQXpCO0FBRUEsT0FBTyxNQUFNQyxNQUFOLENBQWE7QUFRbEJDLEVBQUFBLFdBQVcsR0FBRztBQUNaLFNBQUtDLE1BQUwsR0FBYyxJQUFJQyxLQUFKLEVBQWQ7QUFDRDs7QUFDREMsRUFBQUEsSUFBSSxHQUFTO0FBQ1gsUUFBSSxDQUFDLEtBQUtDLFFBQVYsRUFBb0IsTUFBTyxxQ0FBb0MsS0FBS0EsUUFBUyxpQkFBekQ7QUFDcEIsU0FBS0gsTUFBTCxDQUFZSSxJQUFaLENBQWlCLEtBQUtELFFBQXRCO0FBQ0E7QUFDRDs7QUFDREUsRUFBQUEsT0FBTyxHQUFTO0FBQ2QsU0FBS0YsUUFB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b2tlbi5qc1wiO1xuaW1wb3J0IHsgTGFuZ3VhZ2UsIFJlcXVpcmVtZW50LCBSZXF1aXJlbWVudFR5cGUsIFN0YXRlbWVudCwgU3RhdGVtZW50VGVtcGxhdGUgfSBmcm9tIFwiLi9sYW5ndWFnZS5qc1wiO1xuaW1wb3J0IHsgQWNjZXNzb3IgfSBmcm9tIFwiLi4vYWNjZXNzb3IuanNcIjtcblxuZXhwb3J0IGNsYXNzIFBhcnNlciB7XG4gIHByaXZhdGUgbGFuZ3VhZ2U6IExhbmd1YWdlO1xuICBwcml2YXRlIGFjY2Vzc29yOiBBY2Nlc3NvcjxUb2tlbj47XG5cbiAgcHJpdmF0ZSBzUm9vdDogU3RhdGVtZW50O1xuICBwcml2YXRlIHNDdXJyZW50OiBTdGF0ZW1lbnQ7XG4gIHByaXZhdGUgc1N0YWNrOiBBcnJheTxTdGF0ZW1lbnQ+O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc1N0YWNrID0gbmV3IEFycmF5KCk7XG4gIH1cbiAgc2F2ZSgpOiB0aGlzIHtcbiAgICBpZiAoIXRoaXMuc0N1cnJlbnQpIHRocm93IGBDYW5ub3Qgc2F2ZSwgY3VycmVudCBzdGF0ZW1lbnQgaXMgJHt0aGlzLnNDdXJyZW50fSwgYSBmYWxzeSB2YWx1ZWA7XG4gICAgdGhpcy5zU3RhY2sucHVzaCh0aGlzLnNDdXJyZW50KTtcbiAgICByZXR1cm47XG4gIH1cbiAgcmVzdG9yZSgpOiB0aGlzIHtcbiAgICB0aGlzLnNDdXJyZW50ID0gdGhpcy5zU3RhY2sucG9wKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvL0ZJTklTSEVEIFBIQVNFIDFcbiAgZmluZE1hdGNoaW5nVGVtcGxhdGUodGVtcGxhdGVJZD86IHN0cmluZykge1xuICAgIGxldCByZXN1bHQgPSBmYWxzZTtcbiAgICBmb3IgKGxldCB0ZW1wbGF0ZSBvZiB0aGlzLmxhbmd1YWdlLmdldFN0YXRlbWVudFRlbXBsYXRlcygpKSB7XG4gICAgICBpZiAodGVtcGxhdGVJZCAmJiB0ZW1wbGF0ZUlkICE9PSB0ZW1wbGF0ZS5nZXRJZCgpKSBjb250aW51ZTtcbiAgICAgIC8vV2lsbCB0cnkgdG8gbWVldCByZXF1aXJlbWVudHMgYXQgdGhlIGN1cnJlbnQgdG9rZW4gKGFjY2Vzc29yIGtlZXBzIHRyYWNrIG9mIHRva2VucylcbiAgICAgIHRoaXMuYWNjZXNzb3Iuc2F2ZSgpO1xuXG4gICAgICBpZih0aGlzLm1lZXRUZW1wbGF0ZVJlcXVpcmVtZW50cyh0ZW1wbGF0ZS5nZXRSZXF1aXJlbWVudHMoKSkpIHtcbiAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgICAgbGV0IG1hdGNoZWRUb2tlbnMgPSB0aGlzLmFjY2Vzc29yLnNsaWNlKFxuICAgICAgICAgIHRoaXMuYWNjZXNzb3IuZ2V0TGFzdFNhdmUoKSxcbiAgICAgICAgICB0aGlzLmFjY2Vzc29yLmdldE9mZnNldCgpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZm91bmRcIiwgdGVtcGxhdGUuZ2V0SWQoKSwgXCJ3aXRoXCIsIG1hdGNoZWRUb2tlbnMpO1xuICAgICAgICAvL2lmIHN1Y2Nlc3MsIHdlIGRvbid0IHdhbnQgdG8ganVtcCBiYWNrLCBidXQgc3RpbGwgcmVtb3ZlIHRoZSBzYXZlZCB2YWx1ZVxuICAgICAgICB0aGlzLmFjY2Vzc29yLnJlc3RvcmUodHJ1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgdGhpcy5hY2Nlc3Nvci5yZXN0b3JlKCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvL0ZJTklTSEVEIFBIQVNFIDFcbiAgdG9rZW5NZWV0UmVxdWlyZW1lbnQgKHRva2VuOiBUb2tlbiwgcmVxdWlyZW1lbnQ6IFJlcXVpcmVtZW50KTogYm9vbGVhbiB7XG4gICAgbGV0IHJlc3VsdCA9IHRydWU7XG4gICAgaWYgKHJlcXVpcmVtZW50Lmhhc1Rva2VuVHlwZSgpICYmIHRva2VuLnR5cGUgIT09IHJlcXVpcmVtZW50LmdldFRva2VuVHlwZSgpKSByZXN1bHQgPSBmYWxzZTtcbiAgICBpZiAocmVxdWlyZW1lbnQuaGFzVG9rZW5EYXRhKCkgJiYgdG9rZW4uZGF0YSAhPT0gcmVxdWlyZW1lbnQuZ2V0VG9rZW5EYXRhKCkpIHJlc3VsdCA9IGZhbHNlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvL0ZJTklTSEVEIFBIQVNFIDFcbiAgbWVldFRlbXBsYXRlUmVxdWlyZW1lbnRzIChyZXF1aXJlbWVudHM6IEFycmF5PFJlcXVpcmVtZW50Pik6IGJvb2xlYW4ge1xuICAgIGZvciAobGV0IHJlcXVpcmVtZW50IG9mIHJlcXVpcmVtZW50cykge1xuICAgICAgaWYgKHJlcXVpcmVtZW50LmdldFR5cGUoKSA9PSBcInRva2VuXCIpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRva2VuTWVldFJlcXVpcmVtZW50KFxuICAgICAgICAgIHRoaXMuYWNjZXNzb3IubmV4dCgpLFxuICAgICAgICAgIHJlcXVpcmVtZW50XG4gICAgICAgICkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIGlmIChyZXF1aXJlbWVudC5nZXRUeXBlKCkgPT0gXCJzdGF0ZW1lbnRcIikge1xuICAgICAgICAvL0RFQlVHIC0gdGhpcyBpcyBjYXVzaW5nIGluZmluaWxvb3BcbiAgICAgICAgLy8gcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIC8vVE9ETyAtIGltcGxlbWVudCBhYnN0cmFjdFxuICAgICAgICByZXR1cm4gdGhpcy5maW5kTWF0Y2hpbmdUZW1wbGF0ZShyZXF1aXJlbWVudC5nZXRTdGF0ZW1lbnRJZCgpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBwYXJzZShsYW5nOiBMYW5ndWFnZSwgdG9rZW5zOiBUb2tlbltdKSB7XG4gICAgdGhpcy5sYW5ndWFnZSA9IGxhbmc7XG4gICAgdGhpcy5hY2Nlc3NvciA9IG5ldyBBY2Nlc3NvcjxUb2tlbj4oKS5zZXRJdGVtcyh0b2tlbnMpO1xuXG4gICAgd2hpbGUgKHRoaXMuYWNjZXNzb3IuaGFzTmV4dCgpKSB7XG4gICAgICBpZiAoIXRoaXMuZmluZE1hdGNoaW5nVGVtcGxhdGUoKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImZhaWxcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19