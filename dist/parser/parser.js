import { TokenAccessor } from "../tokenizer/token.js";
import { StatementTemplate } from "./statement.js";
export class Parser {
  constructor() {
    this.stemps = new Array();
  }

  hasStatementTemplate(statement) {
    return this.stemps.includes(statement);
  }

  addStatementTemplate(statement) {
    this.stemps.push(statement);
    return this;
  }

  removeStatementTemplate(statement) {
    let ind = this.stemps.indexOf(statement);

    if (ind != -1) {
      this.stemps.splice(ind, 1);
    }

    return this;
  }

  createStatementTemplate() {
    let result = new StatementTemplate();
    this.addStatementTemplate(result);
    return result;
  }

  parse(tokens) {
    if (!this.stemps || this.stemps.length < 1) throw `No statement templates, cannot parse tokens!`;
    let accessor = new TokenAccessor().setTokens(tokens);
    let result = {
      statements: new Array()
    };
    let statement;
    let success = false;
    let lastToken;

    while (accessor.hasNext()) {
      for (let template of this.stemps) {
        lastToken = accessor.peakNext();
        statement = template.parse(accessor);

        if (statement.getType() != "error") {
          result.statements.push(statement);
          success = true;
          break;
        }
      }

      if (!success) {
        console.warn("dumped the following tree:", result);
        throw `Failed to parse tokens instead statement starting with ${lastToken}`;
      }
    }

    return result;
  }

} //statement
//--expression
//----const
//----var
//----func
//----operator
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXIvcGFyc2VyLnRzIl0sIm5hbWVzIjpbIlRva2VuQWNjZXNzb3IiLCJTdGF0ZW1lbnRUZW1wbGF0ZSIsIlBhcnNlciIsImNvbnN0cnVjdG9yIiwic3RlbXBzIiwiQXJyYXkiLCJoYXNTdGF0ZW1lbnRUZW1wbGF0ZSIsInN0YXRlbWVudCIsImluY2x1ZGVzIiwiYWRkU3RhdGVtZW50VGVtcGxhdGUiLCJwdXNoIiwicmVtb3ZlU3RhdGVtZW50VGVtcGxhdGUiLCJpbmQiLCJpbmRleE9mIiwic3BsaWNlIiwiY3JlYXRlU3RhdGVtZW50VGVtcGxhdGUiLCJyZXN1bHQiLCJwYXJzZSIsInRva2VucyIsImxlbmd0aCIsImFjY2Vzc29yIiwic2V0VG9rZW5zIiwic3RhdGVtZW50cyIsInN1Y2Nlc3MiLCJsYXN0VG9rZW4iLCJoYXNOZXh0IiwidGVtcGxhdGUiLCJwZWFrTmV4dCIsImdldFR5cGUiLCJjb25zb2xlIiwid2FybiJdLCJtYXBwaW5ncyI6IkFBRUEsU0FBZ0JBLGFBQWhCLFFBQXFDLHVCQUFyQztBQUVBLFNBQVNDLGlCQUFULFFBQTZDLGdCQUE3QztBQUVBLE9BQU8sTUFBTUMsTUFBTixDQUFhO0FBRWxCQyxFQUFBQSxXQUFXLEdBQUc7QUFDWixTQUFLQyxNQUFMLEdBQWMsSUFBSUMsS0FBSixFQUFkO0FBQ0Q7O0FBQ0RDLEVBQUFBLG9CQUFvQixDQUFDQyxTQUFELEVBQXdDO0FBQzFELFdBQVEsS0FBS0gsTUFBTCxDQUFZSSxRQUFaLENBQXFCRCxTQUFyQixDQUFSO0FBQ0Q7O0FBQ0RFLEVBQUFBLG9CQUFvQixDQUFDRixTQUFELEVBQXFDO0FBQ3ZELFNBQUtILE1BQUwsQ0FBWU0sSUFBWixDQUFpQkgsU0FBakI7QUFDQSxXQUFPLElBQVA7QUFDRDs7QUFDREksRUFBQUEsdUJBQXVCLENBQUNKLFNBQUQsRUFBcUM7QUFDMUQsUUFBSUssR0FBRyxHQUFHLEtBQUtSLE1BQUwsQ0FBWVMsT0FBWixDQUFvQk4sU0FBcEIsQ0FBVjs7QUFDQSxRQUFJSyxHQUFHLElBQUksQ0FBQyxDQUFaLEVBQWU7QUFDYixXQUFLUixNQUFMLENBQVlVLE1BQVosQ0FBbUJGLEdBQW5CLEVBQXdCLENBQXhCO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0RHLEVBQUFBLHVCQUF1QixHQUF1QjtBQUM1QyxRQUFJQyxNQUFNLEdBQUcsSUFBSWYsaUJBQUosRUFBYjtBQUNBLFNBQUtRLG9CQUFMLENBQTBCTyxNQUExQjtBQUNBLFdBQU9BLE1BQVA7QUFDRDs7QUFDREMsRUFBQUEsS0FBSyxDQUFDQyxNQUFELEVBQXdCO0FBQzNCLFFBQUksQ0FBQyxLQUFLZCxNQUFOLElBQWdCLEtBQUtBLE1BQUwsQ0FBWWUsTUFBWixHQUFxQixDQUF6QyxFQUE0QyxNQUFPLDhDQUFQO0FBQzVDLFFBQUlDLFFBQVEsR0FBRyxJQUFJcEIsYUFBSixHQUFvQnFCLFNBQXBCLENBQThCSCxNQUE5QixDQUFmO0FBQ0EsUUFBSUYsTUFBWSxHQUFHO0FBQ2pCTSxNQUFBQSxVQUFVLEVBQUUsSUFBSWpCLEtBQUo7QUFESyxLQUFuQjtBQUdBLFFBQUlFLFNBQUo7QUFDQSxRQUFJZ0IsT0FBZ0IsR0FBRyxLQUF2QjtBQUNBLFFBQUlDLFNBQUo7O0FBRUEsV0FBT0osUUFBUSxDQUFDSyxPQUFULEVBQVAsRUFBMkI7QUFDekIsV0FBSyxJQUFJQyxRQUFULElBQXFCLEtBQUt0QixNQUExQixFQUFrQztBQUNoQ29CLFFBQUFBLFNBQVMsR0FBR0osUUFBUSxDQUFDTyxRQUFULEVBQVo7QUFFQXBCLFFBQUFBLFNBQVMsR0FBR21CLFFBQVEsQ0FBQ1QsS0FBVCxDQUFlRyxRQUFmLENBQVo7O0FBQ0EsWUFBSWIsU0FBUyxDQUFDcUIsT0FBVixNQUF1QixPQUEzQixFQUFvQztBQUNsQ1osVUFBQUEsTUFBTSxDQUFDTSxVQUFQLENBQW1CWixJQUFuQixDQUF3QkgsU0FBeEI7QUFDQWdCLFVBQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0E7QUFDRDtBQUNGOztBQUNELFVBQUksQ0FBQ0EsT0FBTCxFQUFjO0FBQ1pNLFFBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLDRCQUFiLEVBQTJDZCxNQUEzQztBQUNBLGNBQU8sMERBQXlEUSxTQUFXLEVBQTNFO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPUixNQUFQO0FBQ0Q7O0FBcERpQixDLENBdURwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IFRyZWUgfSBmcm9tIFwiLi90cmVlLmpzXCI7XG5pbXBvcnQgeyBUb2tlbiwgVG9rZW5BY2Nlc3NvciB9IGZyb20gXCIuLi90b2tlbml6ZXIvdG9rZW4uanNcIjtcblxuaW1wb3J0IHsgU3RhdGVtZW50VGVtcGxhdGUsIFN0YXRlbWVudCB9IGZyb20gXCIuL3N0YXRlbWVudC5qc1wiO1xuXG5leHBvcnQgY2xhc3MgUGFyc2VyIHtcbiAgc3RlbXBzOiBBcnJheTxTdGF0ZW1lbnRUZW1wbGF0ZT47XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3RlbXBzID0gbmV3IEFycmF5KCk7XG4gIH1cbiAgaGFzU3RhdGVtZW50VGVtcGxhdGUoc3RhdGVtZW50OiBTdGF0ZW1lbnRUZW1wbGF0ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAodGhpcy5zdGVtcHMuaW5jbHVkZXMoc3RhdGVtZW50KSk7XG4gIH1cbiAgYWRkU3RhdGVtZW50VGVtcGxhdGUoc3RhdGVtZW50OiBTdGF0ZW1lbnRUZW1wbGF0ZSk6IHRoaXMge1xuICAgIHRoaXMuc3RlbXBzLnB1c2goc3RhdGVtZW50KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZW1vdmVTdGF0ZW1lbnRUZW1wbGF0ZShzdGF0ZW1lbnQ6IFN0YXRlbWVudFRlbXBsYXRlKTogdGhpcyB7XG4gICAgbGV0IGluZCA9IHRoaXMuc3RlbXBzLmluZGV4T2Yoc3RhdGVtZW50KTtcbiAgICBpZiAoaW5kICE9IC0xKSB7XG4gICAgICB0aGlzLnN0ZW1wcy5zcGxpY2UoaW5kLCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgY3JlYXRlU3RhdGVtZW50VGVtcGxhdGUgKCk6IFN0YXRlbWVudFRlbXBsYXRlIHtcbiAgICBsZXQgcmVzdWx0ID0gbmV3IFN0YXRlbWVudFRlbXBsYXRlKCk7XG4gICAgdGhpcy5hZGRTdGF0ZW1lbnRUZW1wbGF0ZShyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcGFyc2UodG9rZW5zOiBUb2tlbltdKTogVHJlZSB7XG4gICAgaWYgKCF0aGlzLnN0ZW1wcyB8fCB0aGlzLnN0ZW1wcy5sZW5ndGggPCAxKSB0aHJvdyBgTm8gc3RhdGVtZW50IHRlbXBsYXRlcywgY2Fubm90IHBhcnNlIHRva2VucyFgO1xuICAgIGxldCBhY2Nlc3NvciA9IG5ldyBUb2tlbkFjY2Vzc29yKCkuc2V0VG9rZW5zKHRva2Vucyk7XG4gICAgbGV0IHJlc3VsdDogVHJlZSA9IHtcbiAgICAgIHN0YXRlbWVudHM6IG5ldyBBcnJheSgpXG4gICAgfTtcbiAgICBsZXQgc3RhdGVtZW50OiBTdGF0ZW1lbnQ7XG4gICAgbGV0IHN1Y2Nlc3M6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBsZXQgbGFzdFRva2VuOiBUb2tlbjtcblxuICAgIHdoaWxlIChhY2Nlc3Nvci5oYXNOZXh0KCkpIHtcbiAgICAgIGZvciAobGV0IHRlbXBsYXRlIG9mIHRoaXMuc3RlbXBzKSB7XG4gICAgICAgIGxhc3RUb2tlbiA9IGFjY2Vzc29yLnBlYWtOZXh0KCk7XG5cbiAgICAgICAgc3RhdGVtZW50ID0gdGVtcGxhdGUucGFyc2UoYWNjZXNzb3IpO1xuICAgICAgICBpZiAoc3RhdGVtZW50LmdldFR5cGUoKSAhPSBcImVycm9yXCIpIHtcbiAgICAgICAgICByZXN1bHQuc3RhdGVtZW50cyEucHVzaChzdGF0ZW1lbnQpO1xuICAgICAgICAgIHN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIXN1Y2Nlc3MpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiZHVtcGVkIHRoZSBmb2xsb3dpbmcgdHJlZTpcIiwgcmVzdWx0KTtcbiAgICAgICAgdGhyb3cgYEZhaWxlZCB0byBwYXJzZSB0b2tlbnMgaW5zdGVhZCBzdGF0ZW1lbnQgc3RhcnRpbmcgd2l0aCAke2xhc3RUb2tlbiF9YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbi8vc3RhdGVtZW50XG4vLy0tZXhwcmVzc2lvblxuLy8tLS0tY29uc3Rcbi8vLS0tLXZhclxuLy8tLS0tZnVuY1xuLy8tLS0tb3BlcmF0b3JcbiJdfQ==