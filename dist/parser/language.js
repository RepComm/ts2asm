/**Defines a requirement for a statement definition to be satisfied
 * Requirements can be specific tokens or statements
 * 
 * ```typescript
 * //Example
 * let req: RequirementDefinition = {
 *     type: "token",
 *     tokenType: "bracket",
 *     tokenData: "{" //optional, specifies token must match exactly
 * }
 * ```
 */

/**Defines a statement
 * 
 * A statement is any piece of code that is distinct from another
 * 
 * Examples:
 * 
 * ```javascript
 * //single
 * let i=0;
 * 
 * //compound
 * for (let i=0; i<10; i++) {}
 * ```
 */

/**Defines a language
 * 
 * Can be stringified to JSON
 * 
 */
export class Language {
  constructor(name) {
    this.name = name;
    this.statmentTemplates = new Set();
  }

  getName() {
    return this.name;
  }

  hasStatementTemplate(template) {
    return this.statmentTemplates.has(template);
  }

  addStatementTemplate(template) {
    if (this.hasStatementTemplate(template)) throw `Cannot add statement template more than once ${template}`;
    return this;
  }

  createStatementTemplate(id) {
    let result = new StatementTemplate(id);
    this.addStatementTemplate(result);
    return result;
  }

  static fromJSON(langDef) {
    let result = new Language(langDef.name); //loop through and add statements

    for (let statmentDef of langDef.statmentTemplates) {
      let statement = StatementTemplate.fromJSON(statmentDef);
      result.addStatementTemplate(statement);
    }

    return result;
  }

}
/**Parsers use templates to match tokens to language structures
 * such as blocks, declarations, assignments, loops, function bodies, etc
 * 
 * Statements are made up (ultimately) of tokens,
 * but this implementation of Statement may be made up of other statements and tokens
 * 
 * This allows extensibility of statements, and renders "expressions" obsolete
 */

export class StatementTemplate {
  constructor(id) {
    this.id = id;
    this.requirements = new Array();
  }

  setAbstract(abs) {
    this.abstract = abs;
    return this;
  }

  isAbstract() {
    return this.abstract;
  }

  hasRequirement(req) {
    return this.requirements.includes(req);
  }

  addRequirement(req) {
    if (this.hasRequirement(req)) throw `Cannot add requirement more than once, you can set <requirement>.repeat = <number> for this functionality`;
    this.requirements.push(req);
    return this;
  }

  static fromJSON(statDef) {
    let result = new StatementTemplate(statDef.id);
    result.setAbstract(statDef.abstract);

    for (let reqDef of statDef.requirements) {
      let req = Requirement.fromJSON(reqDef);
      result.addRequirement(req);
    }

    return result;
  }

}
export class Requirement {
  constructor() {}

  setType(type) {
    this.type = type;
    return this;
  }

  setTokenType(type) {
    this.tokenType = type;
    return this;
  }

  setTokenData(data) {
    this.tokenData = data;
    return this;
  }

  setStatementId(id) {
    this.statementId = id;
    return this;
  }

  setRepeats(times) {
    this.repeat = times;
    return this;
  }

  static fromJSON(def) {
    let result = new Requirement();
    result.setType(def.type);
    result.setStatementId(def.statementId);
    result.setTokenType(def.tokenType);
    result.setTokenData(def.tokenData);
    result.setRepeats(def.repeat);
    return result;
  }

}
/**A valid instance of a statement template
 * 
 * Will never be instantiated unless the template it was created from was
 * completely satisfied
 */

export class Statement {}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,