/**Defines a requirement for a statement definition to be satisfied
 * Requirements can be specific tokens or statements
 * 
 * ```typescript
 * //Example
 * let req: RequirementDefinition = {
 *     type: "token",
 *     tokenType: "bracket",
 *     tokenData: "{" //optional, specifies token must match exactly
 * }
 * ```
 */

/**Defines a statement
 * 
 * A statement is any piece of code that is distinct from another
 * 
 * Examples:
 * 
 * ```javascript
 * //single
 * let i=0;
 * 
 * //compound
 * for (let i=0; i<10; i++) {}
 * ```
 */

/**Defines a language
 * 
 * Can be stringified to JSON
 * 
 */
export class Language {
  constructor(name) {
    this.name = name;
    this.statmentTemplates = new Set();
  }

  getName() {
    return this.name;
  }

  hasStatementTemplate(template) {
    return this.statmentTemplates.has(template);
  }

  addStatementTemplate(template) {
    if (this.hasStatementTemplate(template)) throw `Cannot add statement template more than once ${template}`;
    this.statmentTemplates.add(template);
    return this;
  }

  createStatementTemplate(id) {
    let result = new StatementTemplate(id);
    this.addStatementTemplate(result);
    return result;
  }

  getStatementTemplates() {
    return this.statmentTemplates;
  }

  static fromJSON(langDef) {
    let result = new Language(langDef.name); //loop through and add statements

    for (let statmentDef of langDef.statmentTemplates) {
      let statement = StatementTemplate.fromJSON(statmentDef);
      result.addStatementTemplate(statement);
    }

    return result;
  }

  toJSON() {
    let templateCount = this.statmentTemplates.size;
    let templateDefs = new Array(templateCount);
    let i = 0;

    for (let template of this.statmentTemplates) {
      templateDefs[i] = template.toJSON();
      i++;
    }

    let result = {
      name: this.getName(),
      statmentTemplates: templateDefs
    };
    return result;
  }

}
/**Parsers use templates to match tokens to language structures
 * such as blocks, declarations, assignments, loops, function bodies, etc
 * 
 * Statements are made up (ultimately) of tokens,
 * but this implementation of Statement may be made up of other statements and tokens
 * 
 * This allows extensibility of statements, and renders "expressions" obsolete
 */

export class StatementTemplate {
  constructor(id) {
    this.id = id;
    this.requirements = new Array();
  }

  getId() {
    return this.id;
  }

  setAbstract(abs) {
    this.abstract = abs;
    return this;
  }

  isAbstract() {
    return this.abstract;
  }

  hasRequirement(req) {
    return this.requirements.includes(req);
  }

  addRequirement(req) {
    if (this.hasRequirement(req)) throw `Cannot add requirement more than once, you can set <requirement>.repeat = <number> for this functionality`;
    this.requirements.push(req);
    return this;
  }

  getRequirements() {
    return this.requirements;
  }

  static fromJSON(statDef) {
    let result = new StatementTemplate(statDef.id);
    result.setAbstract(statDef.abstract);

    for (let reqDef of statDef.requirements) {
      let req = Requirement.fromJSON(reqDef);
      result.addRequirement(req);
    }

    return result;
  }

  toJSON() {
    let requirementCount = this.requirements.length;
    let requirementDefs = new Array(requirementCount);
    let i = 0;

    for (let requirement of this.requirements) {
      requirementDefs[i] = requirement.toJSON();
      i++;
    }

    let result = {
      id: this.getId(),
      requirements: requirementDefs
    };
    return result;
  }

}
export class Requirement {
  constructor() {
    this.repeat = 0;
  }

  getType() {
    return this.type;
  }

  setType(type) {
    this.type = type;
    return this;
  }

  getTokenType() {
    return this.tokenType;
  }

  setTokenType(type) {
    this.tokenType = type;
    return this;
  }

  hasTokenType() {
    return this.tokenType != null && this.tokenType != undefined;
  }

  getTokenData() {
    return this.tokenData;
  }

  setTokenData(data) {
    this.tokenData = data;
    return this;
  }

  hasTokenData() {
    return this.tokenData != null && this.tokenData != undefined;
  }

  getStatementId() {
    return this.statementId;
  }

  setStatementId(id) {
    this.statementId = id;
    return this;
  }

  hasStatementId() {
    return this.statementId != null && this.statementId != null;
  }

  getRepeats() {
    return this.repeat;
  }
  /**Set how many times to repeat this requirement to satisfy a statement using it
   * 
   * `-1` = unlimited (until next requirement is satisfied)
   * 
   * `0` = no *additional* repeats
   * 
   * `1` = requires 2 of same requirement in a row
   * 
   * @param times 
   */


  setRepeats(times) {
    this.repeat = times;
    return this;
  }

  static fromJSON(def) {
    let result = new Requirement();
    result.setType(def.type);
    result.setStatementId(def.statementId);
    result.setTokenType(def.tokenType);
    result.setTokenData(def.tokenData);
    result.setRepeats(def.repeat);
    return result;
  }

  toJSON() {
    //TODO - error check here
    return {
      type: this.getType(),
      repeat: this.getRepeats(),
      tokenData: this.getTokenData(),
      tokenType: this.getTokenType(),
      statementId: this.getStatementId()
    };
  }

}

/**A valid instance of a statement template
 * 
 * Will never be instantiated unless the template it was created from was
 * completely satisfied
 */
export class Statement {
  constructor() {
    this.items = new Array();
  }

  addItem(item) {
    this.items.push(item);
    return this;
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,