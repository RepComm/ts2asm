import { ExpressionTemplate } from "./expression.js";
export class Statement {
  constructor() {
    this.type = "error";
  }

  setType(t) {
    this.type = t;
    return this;
  }

  getType() {
    return this.type;
  }

}
export class StatementTemplate {
  constructor() {
    this.etemps = new Array();
  }

  parse(accessor) {
    let result = new Statement(); //TODO

    return result;
  }

  hasExpressionTemplate(exp) {
    return this.etemps.includes(exp);
  }

  addExpressionTemplate(exp) {
    //Expression can be used twice
    this.etemps.push(exp);
    return this;
  }

  removeExpressionTemplate(exp) {
    let ind = this.etemps.indexOf(exp);

    if (ind != -1) {
      this.etemps.splice(ind, 1);
    } else {
      throw `Cannot remove expression template ${exp} as it wasn't added/already removed`;
    }

    return this;
  }

  createExpressionTemplate() {
    let result = new ExpressionTemplate();
    this.addExpressionTemplate(result);
    return result;
  }

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZXIvc3RhdGVtZW50LnRzIl0sIm5hbWVzIjpbIkV4cHJlc3Npb25UZW1wbGF0ZSIsIlN0YXRlbWVudCIsImNvbnN0cnVjdG9yIiwidHlwZSIsInNldFR5cGUiLCJ0IiwiZ2V0VHlwZSIsIlN0YXRlbWVudFRlbXBsYXRlIiwiZXRlbXBzIiwiQXJyYXkiLCJwYXJzZSIsImFjY2Vzc29yIiwicmVzdWx0IiwiaGFzRXhwcmVzc2lvblRlbXBsYXRlIiwiZXhwIiwiaW5jbHVkZXMiLCJhZGRFeHByZXNzaW9uVGVtcGxhdGUiLCJwdXNoIiwicmVtb3ZlRXhwcmVzc2lvblRlbXBsYXRlIiwiaW5kIiwiaW5kZXhPZiIsInNwbGljZSIsImNyZWF0ZUV4cHJlc3Npb25UZW1wbGF0ZSJdLCJtYXBwaW5ncyI6IkFBRUEsU0FBU0Esa0JBQVQsUUFBK0MsaUJBQS9DO0FBRUEsT0FBTyxNQUFNQyxTQUFOLENBQWdCO0FBRXJCQyxFQUFBQSxXQUFXLEdBQUc7QUFDWixTQUFLQyxJQUFMLEdBQVksT0FBWjtBQUNEOztBQUNEQyxFQUFBQSxPQUFPLENBQUVDLENBQUYsRUFBbUI7QUFDeEIsU0FBS0YsSUFBTCxHQUFZRSxDQUFaO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0RDLEVBQUFBLE9BQU8sR0FBWTtBQUNqQixXQUFPLEtBQUtILElBQVo7QUFDRDs7QUFYb0I7QUFjdkIsT0FBTyxNQUFNSSxpQkFBTixDQUF3QjtBQUU3QkwsRUFBQUEsV0FBVyxHQUFJO0FBQ2IsU0FBS00sTUFBTCxHQUFjLElBQUlDLEtBQUosRUFBZDtBQUNEOztBQUNEQyxFQUFBQSxLQUFLLENBQUNDLFFBQUQsRUFBcUM7QUFDeEMsUUFBSUMsTUFBaUIsR0FBRyxJQUFJWCxTQUFKLEVBQXhCLENBRHdDLENBRXhDOztBQUNBLFdBQU9XLE1BQVA7QUFDRDs7QUFDREMsRUFBQUEscUJBQXFCLENBQUVDLEdBQUYsRUFBb0M7QUFDdkQsV0FBTyxLQUFLTixNQUFMLENBQVlPLFFBQVosQ0FBcUJELEdBQXJCLENBQVA7QUFDRDs7QUFDREUsRUFBQUEscUJBQXFCLENBQUVGLEdBQUYsRUFBaUM7QUFDcEQ7QUFDQSxTQUFLTixNQUFMLENBQVlTLElBQVosQ0FBaUJILEdBQWpCO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0RJLEVBQUFBLHdCQUF3QixDQUFFSixHQUFGLEVBQWlDO0FBQ3ZELFFBQUlLLEdBQUcsR0FBRyxLQUFLWCxNQUFMLENBQVlZLE9BQVosQ0FBb0JOLEdBQXBCLENBQVY7O0FBQ0EsUUFBSUssR0FBRyxJQUFJLENBQUMsQ0FBWixFQUFlO0FBQ2IsV0FBS1gsTUFBTCxDQUFZYSxNQUFaLENBQW1CRixHQUFuQixFQUF3QixDQUF4QjtBQUNELEtBRkQsTUFFTztBQUNMLFlBQU8scUNBQW9DTCxHQUFJLHFDQUEvQztBQUNEOztBQUNELFdBQU8sSUFBUDtBQUNEOztBQUNEUSxFQUFBQSx3QkFBd0IsR0FBd0I7QUFDOUMsUUFBSVYsTUFBTSxHQUFHLElBQUlaLGtCQUFKLEVBQWI7QUFDQSxTQUFLZ0IscUJBQUwsQ0FBMkJKLE1BQTNCO0FBQ0EsV0FBT0EsTUFBUDtBQUNEOztBQS9CNEIiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IFRva2VuQWNjZXNzb3IgfSBmcm9tIFwiLi4vdG9rZW5pemVyL3Rva2VuLmpzXCI7XG5pbXBvcnQgeyBFeHByZXNzaW9uVGVtcGxhdGUsIEV4cHJlc3Npb24gfSBmcm9tIFwiLi9leHByZXNzaW9uLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBTdGF0ZW1lbnQge1xuICBwcml2YXRlIHR5cGU6IHN0cmluZztcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy50eXBlID0gXCJlcnJvclwiO1xuICB9XG4gIHNldFR5cGUgKHQ6IHN0cmluZyk6IHRoaXMge1xuICAgIHRoaXMudHlwZSA9IHQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgZ2V0VHlwZSAoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy50eXBlITtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RhdGVtZW50VGVtcGxhdGUge1xuICBldGVtcHM6IEFycmF5PEV4cHJlc3Npb24+O1xuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5ldGVtcHMgPSBuZXcgQXJyYXkoKTtcbiAgfVxuICBwYXJzZShhY2Nlc3NvcjogVG9rZW5BY2Nlc3Nvcik6IFN0YXRlbWVudCB7XG4gICAgbGV0IHJlc3VsdDogU3RhdGVtZW50ID0gbmV3IFN0YXRlbWVudCgpO1xuICAgIC8vVE9ET1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaGFzRXhwcmVzc2lvblRlbXBsYXRlIChleHA6IEV4cHJlc3Npb25UZW1wbGF0ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmV0ZW1wcy5pbmNsdWRlcyhleHApO1xuICB9XG4gIGFkZEV4cHJlc3Npb25UZW1wbGF0ZSAoZXhwOiBFeHByZXNzaW9uVGVtcGxhdGUpOiB0aGlzIHtcbiAgICAvL0V4cHJlc3Npb24gY2FuIGJlIHVzZWQgdHdpY2VcbiAgICB0aGlzLmV0ZW1wcy5wdXNoKGV4cCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcmVtb3ZlRXhwcmVzc2lvblRlbXBsYXRlIChleHA6IEV4cHJlc3Npb25UZW1wbGF0ZSk6IHRoaXMge1xuICAgIGxldCBpbmQgPSB0aGlzLmV0ZW1wcy5pbmRleE9mKGV4cCk7XG4gICAgaWYgKGluZCAhPSAtMSkge1xuICAgICAgdGhpcy5ldGVtcHMuc3BsaWNlKGluZCwgMSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGBDYW5ub3QgcmVtb3ZlIGV4cHJlc3Npb24gdGVtcGxhdGUgJHtleHB9IGFzIGl0IHdhc24ndCBhZGRlZC9hbHJlYWR5IHJlbW92ZWRgO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBjcmVhdGVFeHByZXNzaW9uVGVtcGxhdGUgKCk6IEV4cHJlc3Npb25UZW1wbGF0ZSB7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBFeHByZXNzaW9uVGVtcGxhdGUoKTtcbiAgICB0aGlzLmFkZEV4cHJlc3Npb25UZW1wbGF0ZShyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==