import * as path from "path";
import { readTextFile, ensureDir } from "./aliases.js";
import JavaScriptScanner from "./tokenizer/langs/javascript.js";
import tokenizer from "./tokenizer/tokenizer.js";
const PRG_ARGS = process.argv;
let textDec = new TextDecoder();
let textEnc = new TextEncoder(); // setTimeout(()=>{
//   log();
// }, 5000);
// function cwd (): string {
//   return path.dirname(path.fromFileUrl(import.meta.url));
// }

let options = {
  OUTPUT_DIR: "build"
};

for (let i = 0; i < PRG_ARGS.length; i++) {
  let arg = PRG_ARGS[i];

  if (arg.startsWith("-")) {
    let argparts = arg.split("=");
    let aname = argparts[0];
    let avalue = argparts[1];

    switch (aname) {
      case "-in":
        options.INPUT_FILE = avalue;
        break;

      case "-out":
        options.OUTPUT_DIR = avalue;
        break;

      case "-help":
        doHelp();
    }
  }
}

function doError(...msgs) {
  console.error(...msgs);
}

function doWarn(...msgs) {
  console.warn(...msgs);
}

function doLog(...msgs) {
  console.log(...msgs);
}

function doHelp() {
  doLog("-help .. shows this message", "-in [fpath] .. specified input file, relative to cwd", "-out [dpath] .. specified the output dir, relative to cwd");
}

if (!options.INPUT_FILE) {
  doError("No input file specified, you can use -help");
  process.exit(-1);
}

if (!options.OUTPUT_DIR) {
  doWarn("Output dir is not specified, 'build' will be used instead, you can use -help");
}

async function main() {
  //TODO - traverse imports
  let src = await readTextFile(options.INPUT_FILE);
  doLog("Reading", options.INPUT_FILE); //Make sure output dir exists

  await ensureDir(options.OUTPUT_DIR); //grab the input filename without path

  let inputFileName = path.basename(options.INPUT_FILE);
  let outputFileName = inputFileName;
  let inputFileExt = path.extname(inputFileName);

  if (outputFileName.endsWith(inputFileExt)) {
    outputFileName = inputFileName.substring(0, inputFileName.length - inputFileExt.length);
    outputFileName += ".asm";
  }

  console.log(inputFileName, outputFileName); //create a similar named output file, but with output dir

  let outputFilePath = path.join(options.OUTPUT_DIR, inputFileName);
  let jsScanner = new JavaScriptScanner();
  tokenizer(src, jsScanner, ["whsp"]).then(tokens => {
    console.log(tokens);
  }).catch(ex => {
    console.error(ex);
  });
  console.log("done"); //write the text file
  //TODO - have to write transpiled assembly, not source input
}

main();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJwYXRoIiwicmVhZFRleHRGaWxlIiwiZW5zdXJlRGlyIiwiSmF2YVNjcmlwdFNjYW5uZXIiLCJ0b2tlbml6ZXIiLCJQUkdfQVJHUyIsInByb2Nlc3MiLCJhcmd2IiwidGV4dERlYyIsIlRleHREZWNvZGVyIiwidGV4dEVuYyIsIlRleHRFbmNvZGVyIiwib3B0aW9ucyIsIk9VVFBVVF9ESVIiLCJpIiwibGVuZ3RoIiwiYXJnIiwic3RhcnRzV2l0aCIsImFyZ3BhcnRzIiwic3BsaXQiLCJhbmFtZSIsImF2YWx1ZSIsIklOUFVUX0ZJTEUiLCJkb0hlbHAiLCJkb0Vycm9yIiwibXNncyIsImNvbnNvbGUiLCJlcnJvciIsImRvV2FybiIsIndhcm4iLCJkb0xvZyIsImxvZyIsImV4aXQiLCJtYWluIiwic3JjIiwiaW5wdXRGaWxlTmFtZSIsImJhc2VuYW1lIiwib3V0cHV0RmlsZU5hbWUiLCJpbnB1dEZpbGVFeHQiLCJleHRuYW1lIiwiZW5kc1dpdGgiLCJzdWJzdHJpbmciLCJvdXRwdXRGaWxlUGF0aCIsImpvaW4iLCJqc1NjYW5uZXIiLCJ0aGVuIiwidG9rZW5zIiwiY2F0Y2giLCJleCJdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxLQUFLQSxJQUFaLE1BQXNCLE1BQXRCO0FBQ0EsU0FBU0MsWUFBVCxFQUF1QkMsU0FBdkIsUUFBd0MsY0FBeEM7QUFFQSxPQUFPQyxpQkFBUCxNQUE4QixpQ0FBOUI7QUFDQSxPQUFPQyxTQUFQLE1BQXNCLDBCQUF0QjtBQUVBLE1BQU1DLFFBQVEsR0FBR0MsT0FBTyxDQUFDQyxJQUF6QjtBQUVBLElBQUlDLE9BQU8sR0FBRyxJQUFJQyxXQUFKLEVBQWQ7QUFDQSxJQUFJQyxPQUFPLEdBQUcsSUFBSUMsV0FBSixFQUFkLEMsQ0FFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7O0FBT0EsSUFBSUMsT0FBZ0IsR0FBRztBQUNyQkMsRUFBQUEsVUFBVSxFQUFFO0FBRFMsQ0FBdkI7O0FB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QUFTLEdBQUcsSUFBSXpDLGlCQUFKLEVBQWhCO0FBQ0FDLEVBQUFBLFNBQVMsQ0FBQzhCLEdBQUQsRUFBTVUsU0FBTixFQUFpQixDQUFDLE1BQUQsQ0FBakIsQ0FBVCxDQUFvQ0MsSUFBcEMsQ0FBMENDLE1BQUQsSUFBVTtBQUNqRHBCLElBQUFBLE9BQU8sQ0FBQ0ssR0FBUixDQUFZZSxNQUFaO0FBQ0QsR0FGRCxFQUVHQyxLQUZILENBRVVDLEVBQUQsSUFBTTtBQUNidEIsSUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWNxQixFQUFkO0FBQ0QsR0FKRDtBQU1BdEIsRUFBQUEsT0FBTyxDQUFDSyxHQUFSLENBQVksTUFBWixFQWpDb0IsQ0FrQ3BCO0FBQ0E7QUFDRDs7QUFFREUsSUFBSSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IGxvZyBmcm9tIFwid2h5LWlzLW5vZGUtcnVubmluZ1wiO1xuXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gXCJwYXRoXCI7XG5pbXBvcnQgeyByZWFkVGV4dEZpbGUsIGVuc3VyZURpciB9IGZyb20gXCIuL2FsaWFzZXMuanNcIjtcblxuaW1wb3J0IEphdmFTY3JpcHRTY2FubmVyIGZyb20gXCIuL3Rva2VuaXplci9sYW5ncy9qYXZhc2NyaXB0LmpzXCI7XG5pbXBvcnQgdG9rZW5pemVyIGZyb20gXCIuL3Rva2VuaXplci90b2tlbml6ZXIuanNcIjtcblxuY29uc3QgUFJHX0FSR1MgPSBwcm9jZXNzLmFyZ3Y7XG5cbmxldCB0ZXh0RGVjID0gbmV3IFRleHREZWNvZGVyKCk7XG5sZXQgdGV4dEVuYyA9IG5ldyBUZXh0RW5jb2RlcigpO1xuXG4vLyBzZXRUaW1lb3V0KCgpPT57XG4vLyAgIGxvZygpO1xuLy8gfSwgNTAwMCk7XG5cbi8vIGZ1bmN0aW9uIGN3ZCAoKTogc3RyaW5nIHtcbi8vICAgcmV0dXJuIHBhdGguZGlybmFtZShwYXRoLmZyb21GaWxlVXJsKGltcG9ydC5tZXRhLnVybCkpO1xuLy8gfVxuXG5pbnRlcmZhY2UgT3B0aW9ucyB7XG4gIElOUFVUX0ZJTEU/OiBzdHJpbmc7XG4gIE9VVFBVVF9ESVI6IHN0cmluZztcbn1cblxubGV0IG9wdGlvbnM6IE9wdGlvbnMgPSB7XG4gIE9VVFBVVF9ESVI6IFwiYnVpbGRcIlxufVxuXG5mb3IgKGxldCBpID0gMDsgaSA8IFBSR19BUkdTLmxlbmd0aDsgaSsrKSB7XG4gIGxldCBhcmc6IHN0cmluZyA9IFBSR19BUkdTW2ldO1xuICBpZiAoYXJnLnN0YXJ0c1dpdGgoXCItXCIpKSB7XG4gICAgbGV0IGFyZ3BhcnRzID0gYXJnLnNwbGl0KFwiPVwiKTtcbiAgICBsZXQgYW5hbWUgPSBhcmdwYXJ0c1swXTtcbiAgICBsZXQgYXZhbHVlID0gYXJncGFydHNbMV07XG5cbiAgICBzd2l0Y2ggKGFuYW1lKSB7XG4gICAgICBjYXNlIFwiLWluXCI6XG4gICAgICAgIG9wdGlvbnMuSU5QVVRfRklMRSA9IGF2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiLW91dFwiOlxuICAgICAgICBvcHRpb25zLk9VVFBVVF9ESVIgPSBhdmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIi1oZWxwXCI6XG4gICAgICAgIGRvSGVscCgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkb0Vycm9yKC4uLm1zZ3M6IHN0cmluZ1tdKSB7XG4gIGNvbnNvbGUuZXJyb3IoLi4ubXNncyk7XG59XG5cbmZ1bmN0aW9uIGRvV2FybiguLi5tc2dzOiBzdHJpbmdbXSkge1xuICBjb25zb2xlLndhcm4oLi4ubXNncyk7XG59XG5cbmZ1bmN0aW9uIGRvTG9nKC4uLm1zZ3M6IHN0cmluZ1tdKSB7XG4gIGNvbnNvbGUubG9nKC4uLm1zZ3MpO1xufVxuXG5mdW5jdGlvbiBkb0hlbHAoKSB7XG4gIGRvTG9nKFxuICAgIFwiLWhlbHAgLi4gc2hvd3MgdGhpcyBtZXNzYWdlXCIsXG4gICAgXCItaW4gW2ZwYXRoXSAuLiBzcGVjaWZpZWQgaW5wdXQgZmlsZSwgcmVsYXRpdmUgdG8gY3dkXCIsXG4gICAgXCItb3V0IFtkcGF0aF0gLi4gc3BlY2lmaWVkIHRoZSBvdXRwdXQgZGlyLCByZWxhdGl2ZSB0byBjd2RcIlxuICApO1xufVxuXG5pZiAoIW9wdGlvbnMuSU5QVVRfRklMRSkge1xuICBkb0Vycm9yKFwiTm8gaW5wdXQgZmlsZSBzcGVjaWZpZWQsIHlvdSBjYW4gdXNlIC1oZWxwXCIpO1xuICBwcm9jZXNzLmV4aXQoLTEpO1xufVxuaWYgKCFvcHRpb25zLk9VVFBVVF9ESVIpIHtcbiAgZG9XYXJuKFwiT3V0cHV0IGRpciBpcyBub3Qgc3BlY2lmaWVkLCAnYnVpbGQnIHdpbGwgYmUgdXNlZCBpbnN0ZWFkLCB5b3UgY2FuIHVzZSAtaGVscFwiKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbWFpbigpIHtcbiAgLy9UT0RPIC0gdHJhdmVyc2UgaW1wb3J0c1xuICBsZXQgc3JjOiBzdHJpbmcgPSBhd2FpdCByZWFkVGV4dEZpbGUob3B0aW9ucy5JTlBVVF9GSUxFKTtcbiAgZG9Mb2coXG4gICAgXCJSZWFkaW5nXCIsXG4gICAgb3B0aW9ucy5JTlBVVF9GSUxFXG4gICk7XG5cbiAgLy9NYWtlIHN1cmUgb3V0cHV0IGRpciBleGlzdHNcbiAgYXdhaXQgZW5zdXJlRGlyKG9wdGlvbnMuT1VUUFVUX0RJUik7XG5cbiAgLy9ncmFiIHRoZSBpbnB1dCBmaWxlbmFtZSB3aXRob3V0IHBhdGhcbiAgbGV0IGlucHV0RmlsZU5hbWUgPSBwYXRoLmJhc2VuYW1lKG9wdGlvbnMuSU5QVVRfRklMRSk7XG5cbiAgbGV0IG91dHB1dEZpbGVOYW1lID0gaW5wdXRGaWxlTmFtZTtcbiAgbGV0IGlucHV0RmlsZUV4dCA9IHBhdGguZXh0bmFtZShpbnB1dEZpbGVOYW1lKTtcbiAgaWYgKG91dHB1dEZpbGVOYW1lLmVuZHNXaXRoKGlucHV0RmlsZUV4dCkpIHtcbiAgICBvdXRwdXRGaWxlTmFtZSA9IGlucHV0RmlsZU5hbWUuc3Vic3RyaW5nKDAsIGlucHV0RmlsZU5hbWUubGVuZ3RoIC0gaW5wdXRGaWxlRXh0Lmxlbmd0aCk7XG4gICAgb3V0cHV0RmlsZU5hbWUgKz0gXCIuYXNtXCI7XG4gIH1cblxuICBjb25zb2xlLmxvZyhpbnB1dEZpbGVOYW1lLCBvdXRwdXRGaWxlTmFtZSk7XG5cbiAgLy9jcmVhdGUgYSBzaW1pbGFyIG5hbWVkIG91dHB1dCBmaWxlLCBidXQgd2l0aCBvdXRwdXQgZGlyXG4gIGxldCBvdXRwdXRGaWxlUGF0aCA9IHBhdGguam9pbihvcHRpb25zLk9VVFBVVF9ESVIsIGlucHV0RmlsZU5hbWUpO1xuXG4gIGxldCBqc1NjYW5uZXIgPSBuZXcgSmF2YVNjcmlwdFNjYW5uZXIoKTtcbiAgdG9rZW5pemVyKHNyYywganNTY2FubmVyLCBbXCJ3aHNwXCJdKS50aGVuKCh0b2tlbnMpPT57XG4gICAgY29uc29sZS5sb2codG9rZW5zKTtcbiAgfSkuY2F0Y2goKGV4KT0+e1xuICAgIGNvbnNvbGUuZXJyb3IoZXgpO1xuICB9KTtcblxuICBjb25zb2xlLmxvZyhcImRvbmVcIik7XG4gIC8vd3JpdGUgdGhlIHRleHQgZmlsZVxuICAvL1RPRE8gLSBoYXZlIHRvIHdyaXRlIHRyYW5zcGlsZWQgYXNzZW1ibHksIG5vdCBzb3VyY2UgaW5wdXRcbn1cblxubWFpbigpO1xuIl19