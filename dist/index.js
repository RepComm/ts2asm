import * as path from "path";
import { readTextFile, ensureDir } from "./aliases.js";
import { TypeScriptScanner } from "./langs/typescript.js";
import { tokenizer } from "./tokenizer/tokenizer.js";
const PRG_ARGS = process.argv;
let textDec = new TextDecoder();
let textEnc = new TextEncoder();
let options = {
  OUTPUT_DIR: "build"
};

for (let i = 0; i < PRG_ARGS.length; i++) {
  let arg = PRG_ARGS[i];

  if (arg.startsWith("-")) {
    let argparts = arg.split("=");
    let aname = argparts[0];
    let avalue = argparts[1];

    switch (aname) {
      case "-in":
        options.INPUT_FILE = avalue;
        break;

      case "-out":
        options.OUTPUT_DIR = avalue;
        break;

      case "-help":
        doHelp();
    }
  }
}

function doError(...msgs) {
  console.error(...msgs);
}

function doWarn(...msgs) {
  console.warn(...msgs);
}

function doLog(...msgs) {
  console.log(...msgs);
}

function doHelp() {
  doLog("-help .. shows this message", "-in [fpath] .. specified input file, relative to cwd", "-out [dpath] .. specified the output dir, relative to cwd");
}

if (!options.INPUT_FILE) {
  doError("No input file specified, you can use -help");
  process.exit(-1);
}

if (!options.OUTPUT_DIR) {
  doWarn("Output dir is not specified, 'build' will be used instead, you can use -help");
}

async function main() {
  //TODO - traverse imports
  let src = await readTextFile(options.INPUT_FILE);
  doLog("Reading", options.INPUT_FILE); //Make sure output dir exists

  await ensureDir(options.OUTPUT_DIR); //grab the input filename without path

  let inputFileName = path.basename(options.INPUT_FILE);
  let outputFileName = inputFileName;
  let inputFileExt = path.extname(inputFileName);

  if (outputFileName.endsWith(inputFileExt)) {
    outputFileName = inputFileName.substring(0, inputFileName.length - inputFileExt.length);
    outputFileName += ".asm";
  }

  doLog(`Parsing ${inputFileName}, will output to ${outputFileName}`); //create a similar named output file, but with output dir

  let outputFilePath = path.join(options.OUTPUT_DIR, inputFileName);
  let jsScanner = new TypeScriptScanner();
  tokenizer(src, jsScanner, ["whsp"]).then(tokens => {
    console.log(tokens);
  }).catch(ex => {
    console.error(ex);
  });
  doLog("Lexar finished"); //write the text file
  //TODO - have to write transpiled assembly, not source input
}

main();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJwYXRoIiwicmVhZFRleHRGaWxlIiwiZW5zdXJlRGlyIiwiVHlwZVNjcmlwdFNjYW5uZXIiLCJ0b2tlbml6ZXIiLCJQUkdfQVJHUyIsInByb2Nlc3MiLCJhcmd2IiwidGV4dERlYyIsIlRleHREZWNvZGVyIiwidGV4dEVuYyIsIlRleHRFbmNvZGVyIiwib3B0aW9ucyIsIk9VVFBVVF9ESVIiLCJpIiwibGVuZ3RoIiwiYXJnIiwic3RhcnRzV2l0aCIsImFyZ3BhcnRzIiwic3BsaXQiLCJhbmFtZSIsImF2YWx1ZSIsIklOUFVUX0ZJTEUiLCJkb0hlbHAiLCJkb0Vycm9yIiwibXNncyIsImNvbnNvbGUiLCJlcnJvciIsImRvV2FybiIsIndhcm4iLCJkb0xvZyIsImxvZyIsImV4aXQiLCJtYWluIiwic3JjIiwiaW5wdXRGaWxlTmFtZSIsImJhc2VuYW1lIiwib3V0cHV0RmlsZU5hbWUiLCJpbnB1dEZpbGVFeHQiLCJleHRuYW1lIiwiZW5kc1dpdGgiLCJzdWJzdHJpbmciLCJvdXRwdXRGaWxlUGF0aCIsImpvaW4iLCJqc1NjYW5uZXIiLCJ0aGVuIiwidG9rZW5zIiwiY2F0Y2giLCJleCJdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxLQUFLQSxJQUFaLE1BQXNCLE1BQXRCO0FBQ0EsU0FBU0MsWUFBVCxFQUF1QkMsU0FBdkIsUUFBd0MsY0FBeEM7QUFFQSxTQUFTQyxpQkFBVCxRQUFrQyx1QkFBbEM7QUFDQSxTQUFTQyxTQUFULFFBQTBCLDBCQUExQjtBQUVBLE1BQU1DLFFBQVEsR0FBR0MsT0FBTyxDQUFDQyxJQUF6QjtBQUVBLElBQUlDLE9BQU8sR0FBRyxJQUFJQyxXQUFKLEVBQWQ7QUFDQSxJQUFJQyxPQUFPLEdBQUcsSUFBSUMsV0FBSixFQUFkO0FBT0EsSUFBSUMsT0FBZ0IsR0FBRztBQUNyQkMsRUFBQUEsVUFBVSxFQUFFO0FBRFMsQ0FBdkI7O0FBSUEsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFn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QUFDQUMsRUFBQUEsU0FBUyxDQUFDOEIsR0FBRCxFQUFNVSxTQUFOLEVBQWlCLENBQUMsTUFBRCxDQUFqQixDQUFULENBQW9DQyxJQUFwQyxDQUEwQ0MsTUFBRCxJQUFVO0FBQ2pEcEIsSUFBQUEsT0FBTyxDQUFDSyxHQUFSLENBQVllLE1BQVo7QUFDRCxHQUZELEVBRUdDLEtBRkgsQ0FFVUMsRUFBRCxJQUFNO0FBQ2J0QixJQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBY3FCLEVBQWQ7QUFDRCxHQUpEO0FBTUFsQixFQUFBQSxLQUFLLENBQUMsZ0JBQUQsQ0FBTCxDQWpDb0IsQ0FrQ3BCO0FBQ0E7QUFDRDs7QUFFREcsSUFBSSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgcmVhZFRleHRGaWxlLCBlbnN1cmVEaXIgfSBmcm9tIFwiLi9hbGlhc2VzLmpzXCI7XG5cbmltcG9ydCB7IFR5cGVTY3JpcHRTY2FubmVyIH0gZnJvbSBcIi4vbGFuZ3MvdHlwZXNjcmlwdC5qc1wiO1xuaW1wb3J0IHsgdG9rZW5pemVyIH0gZnJvbSBcIi4vdG9rZW5pemVyL3Rva2VuaXplci5qc1wiO1xuXG5jb25zdCBQUkdfQVJHUyA9IHByb2Nlc3MuYXJndjtcblxubGV0IHRleHREZWMgPSBuZXcgVGV4dERlY29kZXIoKTtcbmxldCB0ZXh0RW5jID0gbmV3IFRleHRFbmNvZGVyKCk7XG5cbmludGVyZmFjZSBPcHRpb25zIHtcbiAgSU5QVVRfRklMRT86IHN0cmluZztcbiAgT1VUUFVUX0RJUjogc3RyaW5nO1xufVxuXG5sZXQgb3B0aW9uczogT3B0aW9ucyA9IHtcbiAgT1VUUFVUX0RJUjogXCJidWlsZFwiXG59XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgUFJHX0FSR1MubGVuZ3RoOyBpKyspIHtcbiAgbGV0IGFyZzogc3RyaW5nID0gUFJHX0FSR1NbaV07XG4gIGlmIChhcmcuc3RhcnRzV2l0aChcIi1cIikpIHtcbiAgICBsZXQgYXJncGFydHMgPSBhcmcuc3BsaXQoXCI9XCIpO1xuICAgIGxldCBhbmFtZSA9IGFyZ3BhcnRzWzBdO1xuICAgIGxldCBhdmFsdWUgPSBhcmdwYXJ0c1sxXTtcblxuICAgIHN3aXRjaCAoYW5hbWUpIHtcbiAgICAgIGNhc2UgXCItaW5cIjpcbiAgICAgICAgb3B0aW9ucy5JTlBVVF9GSUxFID0gYXZhbHVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCItb3V0XCI6XG4gICAgICAgIG9wdGlvbnMuT1VUUFVUX0RJUiA9IGF2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiLWhlbHBcIjpcbiAgICAgICAgZG9IZWxwKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRvRXJyb3IoLi4ubXNnczogc3RyaW5nW10pIHtcbiAgY29uc29sZS5lcnJvciguLi5tc2dzKTtcbn1cblxuZnVuY3Rpb24gZG9XYXJuKC4uLm1zZ3M6IHN0cmluZ1tdKSB7XG4gIGNvbnNvbGUud2FybiguLi5tc2dzKTtcbn1cblxuZnVuY3Rpb24gZG9Mb2coLi4ubXNnczogc3RyaW5nW10pIHtcbiAgY29uc29sZS5sb2coLi4ubXNncyk7XG59XG5cbmZ1bmN0aW9uIGRvSGVscCgpIHtcbiAgZG9Mb2coXG4gICAgXCItaGVscCAuLiBzaG93cyB0aGlzIG1lc3NhZ2VcIixcbiAgICBcIi1pbiBbZnBhdGhdIC4uIHNwZWNpZmllZCBpbnB1dCBmaWxlLCByZWxhdGl2ZSB0byBjd2RcIixcbiAgICBcIi1vdXQgW2RwYXRoXSAuLiBzcGVjaWZpZWQgdGhlIG91dHB1dCBkaXIsIHJlbGF0aXZlIHRvIGN3ZFwiXG4gICk7XG59XG5cbmlmICghb3B0aW9ucy5JTlBVVF9GSUxFKSB7XG4gIGRvRXJyb3IoXCJObyBpbnB1dCBmaWxlIHNwZWNpZmllZCwgeW91IGNhbiB1c2UgLWhlbHBcIik7XG4gIHByb2Nlc3MuZXhpdCgtMSk7XG59XG5pZiAoIW9wdGlvbnMuT1VUUFVUX0RJUikge1xuICBkb1dhcm4oXCJPdXRwdXQgZGlyIGlzIG5vdCBzcGVjaWZpZWQsICdidWlsZCcgd2lsbCBiZSB1c2VkIGluc3RlYWQsIHlvdSBjYW4gdXNlIC1oZWxwXCIpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xuICAvL1RPRE8gLSB0cmF2ZXJzZSBpbXBvcnRzXG4gIGxldCBzcmM6IHN0cmluZyA9IGF3YWl0IHJlYWRUZXh0RmlsZShvcHRpb25zLklOUFVUX0ZJTEUpO1xuICBkb0xvZyhcbiAgICBcIlJlYWRpbmdcIixcbiAgICBvcHRpb25zLklOUFVUX0ZJTEVcbiAgKTtcblxuICAvL01ha2Ugc3VyZSBvdXRwdXQgZGlyIGV4aXN0c1xuICBhd2FpdCBlbnN1cmVEaXIob3B0aW9ucy5PVVRQVVRfRElSKTtcblxuICAvL2dyYWIgdGhlIGlucHV0IGZpbGVuYW1lIHdpdGhvdXQgcGF0aFxuICBsZXQgaW5wdXRGaWxlTmFtZSA9IHBhdGguYmFzZW5hbWUob3B0aW9ucy5JTlBVVF9GSUxFKTtcblxuICBsZXQgb3V0cHV0RmlsZU5hbWUgPSBpbnB1dEZpbGVOYW1lO1xuICBsZXQgaW5wdXRGaWxlRXh0ID0gcGF0aC5leHRuYW1lKGlucHV0RmlsZU5hbWUpO1xuICBpZiAob3V0cHV0RmlsZU5hbWUuZW5kc1dpdGgoaW5wdXRGaWxlRXh0KSkge1xuICAgIG91dHB1dEZpbGVOYW1lID0gaW5wdXRGaWxlTmFtZS5zdWJzdHJpbmcoMCwgaW5wdXRGaWxlTmFtZS5sZW5ndGggLSBpbnB1dEZpbGVFeHQubGVuZ3RoKTtcbiAgICBvdXRwdXRGaWxlTmFtZSArPSBcIi5hc21cIjtcbiAgfVxuXG4gIGRvTG9nKGBQYXJzaW5nICR7aW5wdXRGaWxlTmFtZX0sIHdpbGwgb3V0cHV0IHRvICR7b3V0cHV0RmlsZU5hbWV9YCk7XG5cbiAgLy9jcmVhdGUgYSBzaW1pbGFyIG5hbWVkIG91dHB1dCBmaWxlLCBidXQgd2l0aCBvdXRwdXQgZGlyXG4gIGxldCBvdXRwdXRGaWxlUGF0aCA9IHBhdGguam9pbihvcHRpb25zLk9VVFBVVF9ESVIsIGlucHV0RmlsZU5hbWUpO1xuXG4gIGxldCBqc1NjYW5uZXIgPSBuZXcgVHlwZVNjcmlwdFNjYW5uZXIoKTtcbiAgdG9rZW5pemVyKHNyYywganNTY2FubmVyLCBbXCJ3aHNwXCJdKS50aGVuKCh0b2tlbnMpPT57XG4gICAgY29uc29sZS5sb2codG9rZW5zKTtcbiAgfSkuY2F0Y2goKGV4KT0+e1xuICAgIGNvbnNvbGUuZXJyb3IoZXgpO1xuICB9KTtcblxuICBkb0xvZyhcIkxleGFyIGZpbmlzaGVkXCIpO1xuICAvL3dyaXRlIHRoZSB0ZXh0IGZpbGVcbiAgLy9UT0RPIC0gaGF2ZSB0byB3cml0ZSB0cmFuc3BpbGVkIGFzc2VtYmx5LCBub3Qgc291cmNlIGlucHV0XG59XG5cbm1haW4oKTtcbiJdfQ==